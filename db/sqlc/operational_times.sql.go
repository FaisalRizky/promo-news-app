// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: operational_times.sql

package db

import (
	"context"
	"database/sql"
)

const createOperationalTime = `-- name: CreateOperationalTime :one
INSERT INTO operational_time (
  opening_time,
  closing_time,
  operational_days,
  off_days,
  is_active
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, opening_time, closing_time, operational_days, off_days, is_active, created_at
`

type CreateOperationalTimeParams struct {
	OpeningTime     string         `json:"opening_time"`
	ClosingTime     string         `json:"closing_time"`
	OperationalDays string         `json:"operational_days"`
	OffDays         sql.NullString `json:"off_days"`
	IsActive        bool           `json:"is_active"`
}

func (q *Queries) CreateOperationalTime(ctx context.Context, arg CreateOperationalTimeParams) (OperationalTime, error) {
	row := q.db.QueryRowContext(ctx, createOperationalTime,
		arg.OpeningTime,
		arg.ClosingTime,
		arg.OperationalDays,
		arg.OffDays,
		arg.IsActive,
	)
	var i OperationalTime
	err := row.Scan(
		&i.ID,
		&i.OpeningTime,
		&i.ClosingTime,
		&i.OperationalDays,
		&i.OffDays,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getOperationalTime = `-- name: GetOperationalTime :one
SELECT id, opening_time, closing_time, operational_days, off_days, is_active, created_at FROM operational_time
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOperationalTime(ctx context.Context, id int64) (OperationalTime, error) {
	row := q.db.QueryRowContext(ctx, getOperationalTime, id)
	var i OperationalTime
	err := row.Scan(
		&i.ID,
		&i.OpeningTime,
		&i.ClosingTime,
		&i.OperationalDays,
		&i.OffDays,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const listOperationalTime = `-- name: ListOperationalTime :many
SELECT id, opening_time, closing_time, operational_days, off_days, is_active, created_at FROM operational_time
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOperationalTimeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOperationalTime(ctx context.Context, arg ListOperationalTimeParams) ([]OperationalTime, error) {
	rows, err := q.db.QueryContext(ctx, listOperationalTime, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OperationalTime
	for rows.Next() {
		var i OperationalTime
		if err := rows.Scan(
			&i.ID,
			&i.OpeningTime,
			&i.ClosingTime,
			&i.OperationalDays,
			&i.OffDays,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toogleActiveOperationalTime = `-- name: ToogleActiveOperationalTime :one
UPDATE operational_time
SET is_active = $2
WHERE id = $1
RETURNING id, opening_time, closing_time, operational_days, off_days, is_active, created_at
`

type ToogleActiveOperationalTimeParams struct {
	ID       int64 `json:"id"`
	IsActive bool  `json:"is_active"`
}

func (q *Queries) ToogleActiveOperationalTime(ctx context.Context, arg ToogleActiveOperationalTimeParams) (OperationalTime, error) {
	row := q.db.QueryRowContext(ctx, toogleActiveOperationalTime, arg.ID, arg.IsActive)
	var i OperationalTime
	err := row.Scan(
		&i.ID,
		&i.OpeningTime,
		&i.ClosingTime,
		&i.OperationalDays,
		&i.OffDays,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const updateOperationalTime = `-- name: UpdateOperationalTime :one
UPDATE operational_time
SET  
  opening_time=$2,
  closing_time=$3,
  operational_days=$4,
  off_days=$5,
  is_active=$6
WHERE id = $1
RETURNING id, opening_time, closing_time, operational_days, off_days, is_active, created_at
`

type UpdateOperationalTimeParams struct {
	ID              int64          `json:"id"`
	OpeningTime     string         `json:"opening_time"`
	ClosingTime     string         `json:"closing_time"`
	OperationalDays string         `json:"operational_days"`
	OffDays         sql.NullString `json:"off_days"`
	IsActive        bool           `json:"is_active"`
}

func (q *Queries) UpdateOperationalTime(ctx context.Context, arg UpdateOperationalTimeParams) (OperationalTime, error) {
	row := q.db.QueryRowContext(ctx, updateOperationalTime,
		arg.ID,
		arg.OpeningTime,
		arg.ClosingTime,
		arg.OperationalDays,
		arg.OffDays,
		arg.IsActive,
	)
	var i OperationalTime
	err := row.Scan(
		&i.ID,
		&i.OpeningTime,
		&i.ClosingTime,
		&i.OperationalDays,
		&i.OffDays,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
