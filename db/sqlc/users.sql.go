// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO users (
  email,
  name,
  username,
  password,
  password_changed_at,
  phone_number,
  device_token,
  lang,
  avatar,
  user_level,
  is_active
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, email, name, username, password, password_changed_at, phone_number, device_token, lang, avatar, user_level, is_active, created_at
`

type CreateUsersParams struct {
	Email             string         `json:"email"`
	Name              string         `json:"name"`
	Username          string         `json:"username"`
	Password          string         `json:"password"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	PhoneNumber       int64          `json:"phone_number"`
	DeviceToken       sql.NullString `json:"device_token"`
	Lang              sql.NullString `json:"lang"`
	Avatar            sql.NullString `json:"avatar"`
	UserLevel         sql.NullString `json:"user_level"`
	IsActive          bool           `json:"is_active"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUsers,
		arg.Email,
		arg.Name,
		arg.Username,
		arg.Password,
		arg.PasswordChangedAt,
		arg.PhoneNumber,
		arg.DeviceToken,
		arg.Lang,
		arg.Avatar,
		arg.UserLevel,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.PhoneNumber,
		&i.DeviceToken,
		&i.Lang,
		&i.Avatar,
		&i.UserLevel,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one
SELECT id, email, name, username, password, password_changed_at, phone_number, device_token, lang, avatar, user_level, is_active, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsers, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.PhoneNumber,
		&i.DeviceToken,
		&i.Lang,
		&i.Avatar,
		&i.UserLevel,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, name, username, password, password_changed_at, phone_number, device_token, lang, avatar, user_level, is_active, created_at FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Username,
			&i.Password,
			&i.PasswordChangedAt,
			&i.PhoneNumber,
			&i.DeviceToken,
			&i.Lang,
			&i.Avatar,
			&i.UserLevel,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toogleActiveUsers = `-- name: ToogleActiveUsers :one
UPDATE users
SET is_active = $2
WHERE id = $1
RETURNING id, email, name, username, password, password_changed_at, phone_number, device_token, lang, avatar, user_level, is_active, created_at
`

type ToogleActiveUsersParams struct {
	ID       int64 `json:"id"`
	IsActive bool  `json:"is_active"`
}

func (q *Queries) ToogleActiveUsers(ctx context.Context, arg ToogleActiveUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, toogleActiveUsers, arg.ID, arg.IsActive)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.PhoneNumber,
		&i.DeviceToken,
		&i.Lang,
		&i.Avatar,
		&i.UserLevel,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const updateUsers = `-- name: UpdateUsers :one
UPDATE users
SET  
  email = $1,
  name= $2,
  username= $3,
  password= $4,
  password_changed_at= $5,
  phone_number= $6,
  device_token= $7,
  lang= $8,
  avatar= $9,
  user_level= $10,
  is_active= $11
RETURNING id, email, name, username, password, password_changed_at, phone_number, device_token, lang, avatar, user_level, is_active, created_at
`

type UpdateUsersParams struct {
	Email             string         `json:"email"`
	Name              string         `json:"name"`
	Username          string         `json:"username"`
	Password          string         `json:"password"`
	PasswordChangedAt time.Time      `json:"password_changed_at"`
	PhoneNumber       int64          `json:"phone_number"`
	DeviceToken       sql.NullString `json:"device_token"`
	Lang              sql.NullString `json:"lang"`
	Avatar            sql.NullString `json:"avatar"`
	UserLevel         sql.NullString `json:"user_level"`
	IsActive          bool           `json:"is_active"`
}

func (q *Queries) UpdateUsers(ctx context.Context, arg UpdateUsersParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUsers,
		arg.Email,
		arg.Name,
		arg.Username,
		arg.Password,
		arg.PasswordChangedAt,
		arg.PhoneNumber,
		arg.DeviceToken,
		arg.Lang,
		arg.Avatar,
		arg.UserLevel,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.PasswordChangedAt,
		&i.PhoneNumber,
		&i.DeviceToken,
		&i.Lang,
		&i.Avatar,
		&i.UserLevel,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
