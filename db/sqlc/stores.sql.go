// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: stores.sql

package db

import (
	"context"
)

const createStores = `-- name: CreateStores :one
INSERT INTO stores (
  name,
  address,
  description,
  phone_number,
  operational_id,
  is_active
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, name, address, description, phone_number, operational_id, is_active, created_at
`

type CreateStoresParams struct {
	Name          string `json:"name"`
	Address       string `json:"address"`
	Description   string `json:"description"`
	PhoneNumber   int64  `json:"phone_number"`
	OperationalID int64  `json:"operational_id"`
	IsActive      bool   `json:"is_active"`
}

func (q *Queries) CreateStores(ctx context.Context, arg CreateStoresParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStores,
		arg.Name,
		arg.Address,
		arg.Description,
		arg.PhoneNumber,
		arg.OperationalID,
		arg.IsActive,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Description,
		&i.PhoneNumber,
		&i.OperationalID,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getStores = `-- name: GetStores :one
SELECT id, name, address, description, phone_number, operational_id, is_active, created_at FROM stores
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStores(ctx context.Context, id int64) (Store, error) {
	row := q.db.QueryRowContext(ctx, getStores, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Description,
		&i.PhoneNumber,
		&i.OperationalID,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const listStores = `-- name: ListStores :many
SELECT id, name, address, description, phone_number, operational_id, is_active, created_at FROM stores
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListStoresParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListStores(ctx context.Context, arg ListStoresParams) ([]Store, error) {
	rows, err := q.db.QueryContext(ctx, listStores, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Description,
			&i.PhoneNumber,
			&i.OperationalID,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toogleActiveStores = `-- name: ToogleActiveStores :one
UPDATE stores
SET is_active = $2
WHERE id = $1
RETURNING id, name, address, description, phone_number, operational_id, is_active, created_at
`

type ToogleActiveStoresParams struct {
	ID       int64 `json:"id"`
	IsActive bool  `json:"is_active"`
}

func (q *Queries) ToogleActiveStores(ctx context.Context, arg ToogleActiveStoresParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, toogleActiveStores, arg.ID, arg.IsActive)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Description,
		&i.PhoneNumber,
		&i.OperationalID,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const updateStores = `-- name: UpdateStores :one
UPDATE stores
SET name = $2,
    address = $3,
    description= $4,
    phone_number = $5,
    operational_id = $6,
    is_active = $7
WHERE id = $1
RETURNING id, name, address, description, phone_number, operational_id, is_active, created_at
`

type UpdateStoresParams struct {
	ID            int64  `json:"id"`
	Name          string `json:"name"`
	Address       string `json:"address"`
	Description   string `json:"description"`
	PhoneNumber   int64  `json:"phone_number"`
	OperationalID int64  `json:"operational_id"`
	IsActive      bool   `json:"is_active"`
}

func (q *Queries) UpdateStores(ctx context.Context, arg UpdateStoresParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, updateStores,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Description,
		arg.PhoneNumber,
		arg.OperationalID,
		arg.IsActive,
	)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Description,
		&i.PhoneNumber,
		&i.OperationalID,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
