// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: promos.sql

package db

import (
	"context"
)

const createPromos = `-- name: CreatePromos :one
INSERT INTO promos (
  promo_name,
  store_id ,
  promo_code,
  promo_description,
  quantity,
  start_at,
  expired_at,
  is_active,
  created_by
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, promo_name, store_id, promo_code, promo_description, quantity, start_at, expired_at, is_active, created_by, created_at
`

type CreatePromosParams struct {
	PromoName        string `json:"promo_name"`
	StoreID          int64  `json:"store_id"`
	PromoCode        string `json:"promo_code"`
	PromoDescription string `json:"promo_description"`
	Quantity         int64  `json:"quantity"`
	StartAt          int64  `json:"start_at"`
	ExpiredAt        int64  `json:"expired_at"`
	IsActive         bool   `json:"is_active"`
	CreatedBy        int64  `json:"created_by"`
}

func (q *Queries) CreatePromos(ctx context.Context, arg CreatePromosParams) (Promo, error) {
	row := q.db.QueryRowContext(ctx, createPromos,
		arg.PromoName,
		arg.StoreID,
		arg.PromoCode,
		arg.PromoDescription,
		arg.Quantity,
		arg.StartAt,
		arg.ExpiredAt,
		arg.IsActive,
		arg.CreatedBy,
	)
	var i Promo
	err := row.Scan(
		&i.ID,
		&i.PromoName,
		&i.StoreID,
		&i.PromoCode,
		&i.PromoDescription,
		&i.Quantity,
		&i.StartAt,
		&i.ExpiredAt,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getPromos = `-- name: GetPromos :one
SELECT id, promo_name, store_id, promo_code, promo_description, quantity, start_at, expired_at, is_active, created_by, created_at FROM promos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPromos(ctx context.Context, id int64) (Promo, error) {
	row := q.db.QueryRowContext(ctx, getPromos, id)
	var i Promo
	err := row.Scan(
		&i.ID,
		&i.PromoName,
		&i.StoreID,
		&i.PromoCode,
		&i.PromoDescription,
		&i.Quantity,
		&i.StartAt,
		&i.ExpiredAt,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const listPromos = `-- name: ListPromos :many
SELECT id, promo_name, store_id, promo_code, promo_description, quantity, start_at, expired_at, is_active, created_by, created_at FROM promos
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPromosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPromos(ctx context.Context, arg ListPromosParams) ([]Promo, error) {
	rows, err := q.db.QueryContext(ctx, listPromos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Promo{}
	for rows.Next() {
		var i Promo
		if err := rows.Scan(
			&i.ID,
			&i.PromoName,
			&i.StoreID,
			&i.PromoCode,
			&i.PromoDescription,
			&i.Quantity,
			&i.StartAt,
			&i.ExpiredAt,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toogleActivePromos = `-- name: ToogleActivePromos :one
UPDATE promos
SET is_active = $2
WHERE id = $1
RETURNING id, promo_name, store_id, promo_code, promo_description, quantity, start_at, expired_at, is_active, created_by, created_at
`

type ToogleActivePromosParams struct {
	ID       int64 `json:"id"`
	IsActive bool  `json:"is_active"`
}

func (q *Queries) ToogleActivePromos(ctx context.Context, arg ToogleActivePromosParams) (Promo, error) {
	row := q.db.QueryRowContext(ctx, toogleActivePromos, arg.ID, arg.IsActive)
	var i Promo
	err := row.Scan(
		&i.ID,
		&i.PromoName,
		&i.StoreID,
		&i.PromoCode,
		&i.PromoDescription,
		&i.Quantity,
		&i.StartAt,
		&i.ExpiredAt,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const updatePromos = `-- name: UpdatePromos :one
UPDATE promos
SET  
  promo_name =  $2,
  store_id  =  $3,
  promo_code =  $4,
  promo_description = $5, 
  quantity =  $6,
  start_at =  $7,
  expired_at =  $8,
  is_active =  $9,
  created_by =  $10
WHERE id = $1
RETURNING id, promo_name, store_id, promo_code, promo_description, quantity, start_at, expired_at, is_active, created_by, created_at
`

type UpdatePromosParams struct {
	ID               int64  `json:"id"`
	PromoName        string `json:"promo_name"`
	StoreID          int64  `json:"store_id"`
	PromoCode        string `json:"promo_code"`
	PromoDescription string `json:"promo_description"`
	Quantity         int64  `json:"quantity"`
	StartAt          int64  `json:"start_at"`
	ExpiredAt        int64  `json:"expired_at"`
	IsActive         bool   `json:"is_active"`
	CreatedBy        int64  `json:"created_by"`
}

func (q *Queries) UpdatePromos(ctx context.Context, arg UpdatePromosParams) (Promo, error) {
	row := q.db.QueryRowContext(ctx, updatePromos,
		arg.ID,
		arg.PromoName,
		arg.StoreID,
		arg.PromoCode,
		arg.PromoDescription,
		arg.Quantity,
		arg.StartAt,
		arg.ExpiredAt,
		arg.IsActive,
		arg.CreatedBy,
	)
	var i Promo
	err := row.Scan(
		&i.ID,
		&i.PromoName,
		&i.StoreID,
		&i.PromoCode,
		&i.PromoDescription,
		&i.Quantity,
		&i.StartAt,
		&i.ExpiredAt,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
